const Vulnerability = require('../models/Vulnerability');

exports.getUserVulnerabilities = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    const vulns = await Vulnerability.find({ userId: req.user }).sort({ timestamp: -1 });
    res.json(vulns);
  } catch (err) {
    console.error('Get user vulnerabilities error:', err);
    res.status(500).json({ message: 'Server error retrieving vulnerabilities' });
  }
};

exports.addVulnerability = async (req, res) => {
  const { type, severity, description } = req.body;
  try {
    if (!req.user) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    if (!type || !severity || !description) {
      return res.status(400).json({ message: 'Type, severity, and description are required' });
    }

    const vuln = new Vulnerability({ userId: req.user, type, severity, description });
    await vuln.save();
    res.status(201).json({ message: 'Vulnerability added', vulnerability: vuln });
  } catch (err) {
    console.error('Add vulnerability error:', err);
    res.status(500).json({ message: 'Server error adding vulnerability' });
  }
};

exports.updateVulnerabilityStatus = async (req, res) => {
  const { id } = req.params;
  const { status } = req.body; // expected: 'open', 'resolved', 'ignored'
  try {
    if (!req.user) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    if (!status || !['open', 'resolved', 'ignored'].includes(status)) {
      return res.status(400).json({ message: 'Valid status is required (open, resolved, ignored)' });
    }

    const vuln = await Vulnerability.findOne({ _id: id, userId: req.user });
    if (!vuln) return res.status(404).json({ message: 'Vulnerability not found' });

    vuln.status = status;
    await vuln.save();
    res.json({ message: 'Vulnerability status updated', vulnerability: vuln });
  } catch (err) {
    console.error('Update vulnerability status error:', err);
    res.status(500).json({ message: 'Server error updating vulnerability status' });
  }
};